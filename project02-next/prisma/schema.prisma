// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  clerkUserId    String           @unique
  displayName    String?
  bio            String?
  imageUrl       String?
  isVerified     Boolean          @default(false)
  createdAt      DateTime         @default(now())

  createdEvents  Event[]
  participations Participation[]
  interests      Tag[]            @relation("UserInterests")
  following      Follow[] @relation("UserFollows")
  followers      Follow[] @relation("UserFollowedBy")
  blockedBy      Block[]          @relation("BlockedBy")
  blocking       Block[]          @relation("Blocking")
  payments       Payment[]
  chatMessages   ChatMessage[]
}

model Event {
  id            String           @id @default(cuid())
  title         String
  description   String?
  imageUrl      String?
  location      String
  price         Int
  scheduledAt   DateTime
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  visibility    Visibility       @default(PUBLIC)

  owner         User             @relation(fields: [ownerId], references: [id])
  ownerId       String
  participants  Participation[]
  tags          Tag[]            @relation("EventTags")
  payments      Payment[]
  chatMessages  ChatMessage[]
}

enum Visibility {
  PUBLIC // 参加者全員が見える
  FOLLOWERS // フォロワーにのみ見える
  MUTUAL_FOLLOW //相互フォローのユーザーにのみ見える
}

model Participation {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  anonymousName String?
  joinedAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String
  createdAt DateTime @default(now())
  events    Event[]  @relation("EventTags")
  users     User[]   @relation("UserInterests")
}

model Follow{
  id        String   @id @default(cuid())
  follower     User   @relation("UserFollows", fields: [followerId], references: [id])
  followerId   String
  following    User   @relation("UserFollowedBy", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
}
model Block {
  id         String   @id @default(cuid())
  blocker    User     @relation("Blocking", fields: [blockerId], references: [id])
  blockerId  String
  blocked    User     @relation("BlockedBy", fields: [blockedId], references: [id])
  blockedId  String
  createdAt  DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Payment {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  amount      Int
  status      String   // "pending", "succeeded", "failed"
  providerId  String   // Stripe等の支払いID
  createdAt   DateTime @default(now())

  @@unique([userId, eventId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String

  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String

  content   String
  createdAt DateTime @default(now())
}
